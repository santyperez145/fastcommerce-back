CATEGORIES:

CREATE:
import Category from "../../models/Category.js";

let create = async (req, res, next) => {
    try {
        let { name } = req.body;
        
        if (!name) {
            return res.status(401).json({
                success: false,
                menssage: 'You must provide a name'
            })
        }

        let existingCategory = await Category.findOne({name});
        if (existingCategory) {
            return res.status(200).json({
                success: false,
                message: "Category already exits"
            })
        }

        let category = await Category.create({name})
        return res.status(201).json({
            succes: true,
            message: 'New category created successfully',
            response: category
        })

    } catch (error) {
        return next(error)        
    }

}

export default create;


READ:
import Category from "../../models/Category.js";

let read = async (req, res, next) => {
    try {
        let category = await Category.find({})
        if (!category) {
            return res.status(404).json({
                success: false,
                message: "Categories not founded"
            })
        }

        return res.status(200).json({
            success: true,
            message: 'All categories list:',
            response: category
        })

    } catch (error) {
        return next(error)
    }
}

export default read;


REMOVE:
import Category from "../../models/Category.js";

let remove = async (req, res, next) => {
    try {
        let {id} = req.params;
        let categoryRemoved = await Category.findByIdAndDelete(id);
        if (!categoryRemoved) {
            return res.status(400).json({
                success: true,
                message: "Category doesn't exist",
            })
        }
        return res.status(200).json({
            success: true,
            message: 'Category deleted sucessfully'
        })
        
    } catch (error) {
        return next (error)
    }
}

export default remove;



UPDATE:
import Category from "../../models/Category.js";

let update = async (req, res, next) => {
    try {
        let {newName} = req.body;
        let {id} = req.params;

        let category = await Category.findByIdAndUpdate(id, {name: newName})
        if (!category){
            return res.status(401).json({
                success: false,
                menssage: 'Category not found'
            })
        }
        return res.status(200).json({
            success: true,
            message: 'Category updated sucessfully',
            response: category
        })
        

    } catch (error) {
        return next(error)
    }
}

export default update;


PRODUCTS:
CREATE:
import Product from '../../models/Product.js';

let create = async (req, res, next) => {
    try {
        let product = await Product.create(req.body);
        return res.status(201).json({
            success: true,
            message: "Product created sucessfully",
            response: product
        })

    } catch (error) {
        return next(error)
    }
}

export default create;     


READ_ONE:
import Product from "../../models/Product.js";

let read_one = async (res, req, next) => {
    try {
        let {id} = req.params
        let product = await Product.findById(id)

        if (!product) {
            return res.status(401).json({
                success: false,
                message: 'Product not finded'
            })
        }
        return res.status(200).json({
            success: true,
            message: 'Product finded sucessfully',
            response: product
        })

    } catch (error) {
        return next(error)
    }
}

export default read_one


READ:
import Product from "../../models/Product.js";

let read = async (req, res, next) => {
    try {
       let queries = {}
       let pagination = {page: 1, limit: 18};
       
       if (req.query.page) {
        pagination.page = req.query.page
       }
       if (req.query.limit) {
        pagination.limit = req.pagination.limit;
       }
       if (req.query.name){
        queries.name = new RegExp(req.query.name.trin(), 'i')
       }
       if (req.query.description) {
        queries.description = req.query.description
       }
       if (req.query.brand) {
        queries.description = new RegExp(req.query.brand.trin(), 'i')
       }

       let products = await Product.find({queries})
        .sort({price: 1, name: 1, createdAt: 1})
        .skip(pagination.page > 0 ? (pagination.page - 1) * pagination.limit : 0)
        .limit(pagination.limit > 0 ? pagination.limit : 0)

        let counter = await Product.countDocuments(queries)
        let pages = Math.ceil(counter/pagination.limit)
        let prevPage = pagination.page > 1 ? Number(pagination.page) -1 : 0
        let nextPage = pagination.limit < pages ? Number(pagination.page) + 1 : 0

        return res.status(201).json({
            success: true,
            message: 'Products finded sucessfully',
            response: products,
            pages,
            prevPage,
            nextPage
        })

    } catch (error) {
        return next(error)
    }

}

export default read;


REMOVE:
import Product from "../../models/Product.js";

let remove = async (res, req, next) => {
    try {
        let {id} = req.params
        let productDeleted = await Product.findByIdAndDelete(id)
        if (!productDeleted) {
            return res.status(400).json({
                success: false,
                message: "Product doesn't exist"
            })
        }
        return res.status(200).json({
            success: true,
            message: "Product deleted sucessfully",
            response: productDeleted
        })

    } catch (error) {
        return next(error)
    }
}

export default remove


UPDATE:
import Product from "../../models/Product.js";

let update = async (req, res, next) => {
    try {
        let {name, description, cover_photo, price, stock} = req.body
        let {id} = req.params
        let data = {}

        if (name) {
            data.name = name
        }
        if (description) {
            data.description = description
        }
        if (cover_photo) {
            data.cover_photo = cover_photo
        }
        if (price) {
            data.price = price
        }
        if (stock) {
            data.stock = stock
        }
        let productUpdated = await Product.findByIdAndUpdated({_id: id}, {...data})
        if (!productUpdated) {
            return res.status(401).json({
                success: true,
                message: "Product doesn't exist"
            })
        }
        return res.status(200).json({
            success: true,
            message: "Product updated sucessfully",
            response: productUpdated
        })

    } catch (error) {
        return next(error)
    }
}

export default update;

MODELS:
CATEGORY:
import { Schema, model } from 'mongoose';

let collection = 'categories';
let schema = new Schema(
    {
        name: { type: String, require: true },
        color: { type: String, require: true },
        hover: { type: String, requiere: true },
        description: { type: String, requiere: true },
        cover_photo: { type: String, requiere: true },
    }
)

const Category = model(collection, schema);
export default Category;



PRODUCT:
import { Types } from 'mongoose';
import { Schema, model, Types } from 'moongose';

let collection = 'products'
let schema = new Schema(
    {
        category_id: { type: Types.ObjectId, ref:'categories', require: true },
        name: { type: String, require: true },
        description: { type: String, require: true },
        cover_photo: { type: String, require: true },
        price: { type: Number, require: true },
        brand: { type: String, require: true },
        stock: { type: Number, require: true },
    },
    {timestamps: true}
    )

const Product = model(collection, schema);
export default Product;


GITINGNORE:
node_modules
.env


.ENV:
LINK_DB = 'mongodb+srv://santyperez145s:dakar2012@santyperez145s.ozkukd3.mongodb.net/fastcommerce'
SECRET_KEY = 's3cr3t'


